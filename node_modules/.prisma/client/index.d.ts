
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Gola
 * 
 */
export type Gola = $Result.DefaultSelection<Prisma.$GolaPayload>
/**
 * Model Polo
 * 
 */
export type Polo = $Result.DefaultSelection<Prisma.$PoloPayload>
/**
 * Model Punho
 * 
 */
export type Punho = $Result.DefaultSelection<Prisma.$PunhoPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Golas
 * const golas = await prisma.gola.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Golas
   * const golas = await prisma.gola.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.gola`: Exposes CRUD operations for the **Gola** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Golas
    * const golas = await prisma.gola.findMany()
    * ```
    */
  get gola(): Prisma.GolaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.polo`: Exposes CRUD operations for the **Polo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Polos
    * const polos = await prisma.polo.findMany()
    * ```
    */
  get polo(): Prisma.PoloDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.punho`: Exposes CRUD operations for the **Punho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Punhos
    * const punhos = await prisma.punho.findMany()
    * ```
    */
  get punho(): Prisma.PunhoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Gola: 'Gola',
    Polo: 'Polo',
    Punho: 'Punho',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "gola" | "polo" | "punho" | "usuarios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Gola: {
        payload: Prisma.$GolaPayload<ExtArgs>
        fields: Prisma.GolaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GolaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GolaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          findFirst: {
            args: Prisma.GolaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GolaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          findMany: {
            args: Prisma.GolaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>[]
          }
          create: {
            args: Prisma.GolaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          createMany: {
            args: Prisma.GolaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GolaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>[]
          }
          delete: {
            args: Prisma.GolaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          update: {
            args: Prisma.GolaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          deleteMany: {
            args: Prisma.GolaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GolaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GolaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>[]
          }
          upsert: {
            args: Prisma.GolaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GolaPayload>
          }
          aggregate: {
            args: Prisma.GolaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGola>
          }
          groupBy: {
            args: Prisma.GolaGroupByArgs<ExtArgs>
            result: $Utils.Optional<GolaGroupByOutputType>[]
          }
          count: {
            args: Prisma.GolaCountArgs<ExtArgs>
            result: $Utils.Optional<GolaCountAggregateOutputType> | number
          }
        }
      }
      Polo: {
        payload: Prisma.$PoloPayload<ExtArgs>
        fields: Prisma.PoloFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PoloFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PoloFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          findFirst: {
            args: Prisma.PoloFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PoloFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          findMany: {
            args: Prisma.PoloFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>[]
          }
          create: {
            args: Prisma.PoloCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          createMany: {
            args: Prisma.PoloCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PoloCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>[]
          }
          delete: {
            args: Prisma.PoloDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          update: {
            args: Prisma.PoloUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          deleteMany: {
            args: Prisma.PoloDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PoloUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PoloUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>[]
          }
          upsert: {
            args: Prisma.PoloUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoloPayload>
          }
          aggregate: {
            args: Prisma.PoloAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePolo>
          }
          groupBy: {
            args: Prisma.PoloGroupByArgs<ExtArgs>
            result: $Utils.Optional<PoloGroupByOutputType>[]
          }
          count: {
            args: Prisma.PoloCountArgs<ExtArgs>
            result: $Utils.Optional<PoloCountAggregateOutputType> | number
          }
        }
      }
      Punho: {
        payload: Prisma.$PunhoPayload<ExtArgs>
        fields: Prisma.PunhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PunhoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PunhoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          findFirst: {
            args: Prisma.PunhoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PunhoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          findMany: {
            args: Prisma.PunhoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>[]
          }
          create: {
            args: Prisma.PunhoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          createMany: {
            args: Prisma.PunhoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PunhoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>[]
          }
          delete: {
            args: Prisma.PunhoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          update: {
            args: Prisma.PunhoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          deleteMany: {
            args: Prisma.PunhoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PunhoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PunhoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>[]
          }
          upsert: {
            args: Prisma.PunhoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunhoPayload>
          }
          aggregate: {
            args: Prisma.PunhoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePunho>
          }
          groupBy: {
            args: Prisma.PunhoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PunhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PunhoCountArgs<ExtArgs>
            result: $Utils.Optional<PunhoCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usuariosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    gola?: GolaOmit
    polo?: PoloOmit
    punho?: PunhoOmit
    usuarios?: usuariosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Gola
   */

  export type AggregateGola = {
    _count: GolaCountAggregateOutputType | null
    _avg: GolaAvgAggregateOutputType | null
    _sum: GolaSumAggregateOutputType | null
    _min: GolaMinAggregateOutputType | null
    _max: GolaMaxAggregateOutputType | null
  }

  export type GolaAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type GolaSumAggregateOutputType = {
    quantidade: number | null
  }

  export type GolaMinAggregateOutputType = {
    poloCodigo: string | null
    quantidade: number | null
  }

  export type GolaMaxAggregateOutputType = {
    poloCodigo: string | null
    quantidade: number | null
  }

  export type GolaCountAggregateOutputType = {
    poloCodigo: number
    quantidade: number
    _all: number
  }


  export type GolaAvgAggregateInputType = {
    quantidade?: true
  }

  export type GolaSumAggregateInputType = {
    quantidade?: true
  }

  export type GolaMinAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
  }

  export type GolaMaxAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
  }

  export type GolaCountAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
    _all?: true
  }

  export type GolaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gola to aggregate.
     */
    where?: GolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Golas to fetch.
     */
    orderBy?: GolaOrderByWithRelationInput | GolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Golas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Golas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Golas
    **/
    _count?: true | GolaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GolaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GolaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GolaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GolaMaxAggregateInputType
  }

  export type GetGolaAggregateType<T extends GolaAggregateArgs> = {
        [P in keyof T & keyof AggregateGola]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGola[P]>
      : GetScalarType<T[P], AggregateGola[P]>
  }




  export type GolaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GolaWhereInput
    orderBy?: GolaOrderByWithAggregationInput | GolaOrderByWithAggregationInput[]
    by: GolaScalarFieldEnum[] | GolaScalarFieldEnum
    having?: GolaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GolaCountAggregateInputType | true
    _avg?: GolaAvgAggregateInputType
    _sum?: GolaSumAggregateInputType
    _min?: GolaMinAggregateInputType
    _max?: GolaMaxAggregateInputType
  }

  export type GolaGroupByOutputType = {
    poloCodigo: string
    quantidade: number
    _count: GolaCountAggregateOutputType | null
    _avg: GolaAvgAggregateOutputType | null
    _sum: GolaSumAggregateOutputType | null
    _min: GolaMinAggregateOutputType | null
    _max: GolaMaxAggregateOutputType | null
  }

  type GetGolaGroupByPayload<T extends GolaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GolaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GolaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GolaGroupByOutputType[P]>
            : GetScalarType<T[P], GolaGroupByOutputType[P]>
        }
      >
    >


  export type GolaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gola"]>

  export type GolaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gola"]>

  export type GolaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gola"]>

  export type GolaSelectScalar = {
    poloCodigo?: boolean
    quantidade?: boolean
  }

  export type GolaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"poloCodigo" | "quantidade", ExtArgs["result"]["gola"]>
  export type GolaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }
  export type GolaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }
  export type GolaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }

  export type $GolaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gola"
    objects: {
      Polo: Prisma.$PoloPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      poloCodigo: string
      quantidade: number
    }, ExtArgs["result"]["gola"]>
    composites: {}
  }

  type GolaGetPayload<S extends boolean | null | undefined | GolaDefaultArgs> = $Result.GetResult<Prisma.$GolaPayload, S>

  type GolaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GolaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GolaCountAggregateInputType | true
    }

  export interface GolaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gola'], meta: { name: 'Gola' } }
    /**
     * Find zero or one Gola that matches the filter.
     * @param {GolaFindUniqueArgs} args - Arguments to find a Gola
     * @example
     * // Get one Gola
     * const gola = await prisma.gola.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GolaFindUniqueArgs>(args: SelectSubset<T, GolaFindUniqueArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Gola that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GolaFindUniqueOrThrowArgs} args - Arguments to find a Gola
     * @example
     * // Get one Gola
     * const gola = await prisma.gola.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GolaFindUniqueOrThrowArgs>(args: SelectSubset<T, GolaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gola that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaFindFirstArgs} args - Arguments to find a Gola
     * @example
     * // Get one Gola
     * const gola = await prisma.gola.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GolaFindFirstArgs>(args?: SelectSubset<T, GolaFindFirstArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gola that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaFindFirstOrThrowArgs} args - Arguments to find a Gola
     * @example
     * // Get one Gola
     * const gola = await prisma.gola.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GolaFindFirstOrThrowArgs>(args?: SelectSubset<T, GolaFindFirstOrThrowArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Golas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Golas
     * const golas = await prisma.gola.findMany()
     * 
     * // Get first 10 Golas
     * const golas = await prisma.gola.findMany({ take: 10 })
     * 
     * // Only select the `poloCodigo`
     * const golaWithPoloCodigoOnly = await prisma.gola.findMany({ select: { poloCodigo: true } })
     * 
     */
    findMany<T extends GolaFindManyArgs>(args?: SelectSubset<T, GolaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Gola.
     * @param {GolaCreateArgs} args - Arguments to create a Gola.
     * @example
     * // Create one Gola
     * const Gola = await prisma.gola.create({
     *   data: {
     *     // ... data to create a Gola
     *   }
     * })
     * 
     */
    create<T extends GolaCreateArgs>(args: SelectSubset<T, GolaCreateArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Golas.
     * @param {GolaCreateManyArgs} args - Arguments to create many Golas.
     * @example
     * // Create many Golas
     * const gola = await prisma.gola.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GolaCreateManyArgs>(args?: SelectSubset<T, GolaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Golas and returns the data saved in the database.
     * @param {GolaCreateManyAndReturnArgs} args - Arguments to create many Golas.
     * @example
     * // Create many Golas
     * const gola = await prisma.gola.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Golas and only return the `poloCodigo`
     * const golaWithPoloCodigoOnly = await prisma.gola.createManyAndReturn({
     *   select: { poloCodigo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GolaCreateManyAndReturnArgs>(args?: SelectSubset<T, GolaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Gola.
     * @param {GolaDeleteArgs} args - Arguments to delete one Gola.
     * @example
     * // Delete one Gola
     * const Gola = await prisma.gola.delete({
     *   where: {
     *     // ... filter to delete one Gola
     *   }
     * })
     * 
     */
    delete<T extends GolaDeleteArgs>(args: SelectSubset<T, GolaDeleteArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Gola.
     * @param {GolaUpdateArgs} args - Arguments to update one Gola.
     * @example
     * // Update one Gola
     * const gola = await prisma.gola.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GolaUpdateArgs>(args: SelectSubset<T, GolaUpdateArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Golas.
     * @param {GolaDeleteManyArgs} args - Arguments to filter Golas to delete.
     * @example
     * // Delete a few Golas
     * const { count } = await prisma.gola.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GolaDeleteManyArgs>(args?: SelectSubset<T, GolaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Golas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Golas
     * const gola = await prisma.gola.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GolaUpdateManyArgs>(args: SelectSubset<T, GolaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Golas and returns the data updated in the database.
     * @param {GolaUpdateManyAndReturnArgs} args - Arguments to update many Golas.
     * @example
     * // Update many Golas
     * const gola = await prisma.gola.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Golas and only return the `poloCodigo`
     * const golaWithPoloCodigoOnly = await prisma.gola.updateManyAndReturn({
     *   select: { poloCodigo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GolaUpdateManyAndReturnArgs>(args: SelectSubset<T, GolaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Gola.
     * @param {GolaUpsertArgs} args - Arguments to update or create a Gola.
     * @example
     * // Update or create a Gola
     * const gola = await prisma.gola.upsert({
     *   create: {
     *     // ... data to create a Gola
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gola we want to update
     *   }
     * })
     */
    upsert<T extends GolaUpsertArgs>(args: SelectSubset<T, GolaUpsertArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Golas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaCountArgs} args - Arguments to filter Golas to count.
     * @example
     * // Count the number of Golas
     * const count = await prisma.gola.count({
     *   where: {
     *     // ... the filter for the Golas we want to count
     *   }
     * })
    **/
    count<T extends GolaCountArgs>(
      args?: Subset<T, GolaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GolaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gola.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GolaAggregateArgs>(args: Subset<T, GolaAggregateArgs>): Prisma.PrismaPromise<GetGolaAggregateType<T>>

    /**
     * Group by Gola.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GolaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GolaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GolaGroupByArgs['orderBy'] }
        : { orderBy?: GolaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GolaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGolaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gola model
   */
  readonly fields: GolaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gola.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GolaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Polo<T extends PoloDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PoloDefaultArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gola model
   */ 
  interface GolaFieldRefs {
    readonly poloCodigo: FieldRef<"Gola", 'String'>
    readonly quantidade: FieldRef<"Gola", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Gola findUnique
   */
  export type GolaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter, which Gola to fetch.
     */
    where: GolaWhereUniqueInput
  }

  /**
   * Gola findUniqueOrThrow
   */
  export type GolaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter, which Gola to fetch.
     */
    where: GolaWhereUniqueInput
  }

  /**
   * Gola findFirst
   */
  export type GolaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter, which Gola to fetch.
     */
    where?: GolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Golas to fetch.
     */
    orderBy?: GolaOrderByWithRelationInput | GolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Golas.
     */
    cursor?: GolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Golas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Golas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Golas.
     */
    distinct?: GolaScalarFieldEnum | GolaScalarFieldEnum[]
  }

  /**
   * Gola findFirstOrThrow
   */
  export type GolaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter, which Gola to fetch.
     */
    where?: GolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Golas to fetch.
     */
    orderBy?: GolaOrderByWithRelationInput | GolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Golas.
     */
    cursor?: GolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Golas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Golas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Golas.
     */
    distinct?: GolaScalarFieldEnum | GolaScalarFieldEnum[]
  }

  /**
   * Gola findMany
   */
  export type GolaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter, which Golas to fetch.
     */
    where?: GolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Golas to fetch.
     */
    orderBy?: GolaOrderByWithRelationInput | GolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Golas.
     */
    cursor?: GolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Golas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Golas.
     */
    skip?: number
    distinct?: GolaScalarFieldEnum | GolaScalarFieldEnum[]
  }

  /**
   * Gola create
   */
  export type GolaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * The data needed to create a Gola.
     */
    data: XOR<GolaCreateInput, GolaUncheckedCreateInput>
  }

  /**
   * Gola createMany
   */
  export type GolaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Golas.
     */
    data: GolaCreateManyInput | GolaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gola createManyAndReturn
   */
  export type GolaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * The data used to create many Golas.
     */
    data: GolaCreateManyInput | GolaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gola update
   */
  export type GolaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * The data needed to update a Gola.
     */
    data: XOR<GolaUpdateInput, GolaUncheckedUpdateInput>
    /**
     * Choose, which Gola to update.
     */
    where: GolaWhereUniqueInput
  }

  /**
   * Gola updateMany
   */
  export type GolaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Golas.
     */
    data: XOR<GolaUpdateManyMutationInput, GolaUncheckedUpdateManyInput>
    /**
     * Filter which Golas to update
     */
    where?: GolaWhereInput
    /**
     * Limit how many Golas to update.
     */
    limit?: number
  }

  /**
   * Gola updateManyAndReturn
   */
  export type GolaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * The data used to update Golas.
     */
    data: XOR<GolaUpdateManyMutationInput, GolaUncheckedUpdateManyInput>
    /**
     * Filter which Golas to update
     */
    where?: GolaWhereInput
    /**
     * Limit how many Golas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gola upsert
   */
  export type GolaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * The filter to search for the Gola to update in case it exists.
     */
    where: GolaWhereUniqueInput
    /**
     * In case the Gola found by the `where` argument doesn't exist, create a new Gola with this data.
     */
    create: XOR<GolaCreateInput, GolaUncheckedCreateInput>
    /**
     * In case the Gola was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GolaUpdateInput, GolaUncheckedUpdateInput>
  }

  /**
   * Gola delete
   */
  export type GolaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    /**
     * Filter which Gola to delete.
     */
    where: GolaWhereUniqueInput
  }

  /**
   * Gola deleteMany
   */
  export type GolaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Golas to delete
     */
    where?: GolaWhereInput
    /**
     * Limit how many Golas to delete.
     */
    limit?: number
  }

  /**
   * Gola without action
   */
  export type GolaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
  }


  /**
   * Model Polo
   */

  export type AggregatePolo = {
    _count: PoloCountAggregateOutputType | null
    _min: PoloMinAggregateOutputType | null
    _max: PoloMaxAggregateOutputType | null
  }

  export type PoloMinAggregateOutputType = {
    codigo: string | null
    cor: string | null
  }

  export type PoloMaxAggregateOutputType = {
    codigo: string | null
    cor: string | null
  }

  export type PoloCountAggregateOutputType = {
    codigo: number
    cor: number
    _all: number
  }


  export type PoloMinAggregateInputType = {
    codigo?: true
    cor?: true
  }

  export type PoloMaxAggregateInputType = {
    codigo?: true
    cor?: true
  }

  export type PoloCountAggregateInputType = {
    codigo?: true
    cor?: true
    _all?: true
  }

  export type PoloAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Polo to aggregate.
     */
    where?: PoloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polos to fetch.
     */
    orderBy?: PoloOrderByWithRelationInput | PoloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PoloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Polos
    **/
    _count?: true | PoloCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PoloMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PoloMaxAggregateInputType
  }

  export type GetPoloAggregateType<T extends PoloAggregateArgs> = {
        [P in keyof T & keyof AggregatePolo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePolo[P]>
      : GetScalarType<T[P], AggregatePolo[P]>
  }




  export type PoloGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoloWhereInput
    orderBy?: PoloOrderByWithAggregationInput | PoloOrderByWithAggregationInput[]
    by: PoloScalarFieldEnum[] | PoloScalarFieldEnum
    having?: PoloScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PoloCountAggregateInputType | true
    _min?: PoloMinAggregateInputType
    _max?: PoloMaxAggregateInputType
  }

  export type PoloGroupByOutputType = {
    codigo: string
    cor: string
    _count: PoloCountAggregateOutputType | null
    _min: PoloMinAggregateOutputType | null
    _max: PoloMaxAggregateOutputType | null
  }

  type GetPoloGroupByPayload<T extends PoloGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PoloGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PoloGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PoloGroupByOutputType[P]>
            : GetScalarType<T[P], PoloGroupByOutputType[P]>
        }
      >
    >


  export type PoloSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    cor?: boolean
    Gola?: boolean | Polo$GolaArgs<ExtArgs>
    Punho?: boolean | Polo$PunhoArgs<ExtArgs>
  }, ExtArgs["result"]["polo"]>

  export type PoloSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    cor?: boolean
  }, ExtArgs["result"]["polo"]>

  export type PoloSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    cor?: boolean
  }, ExtArgs["result"]["polo"]>

  export type PoloSelectScalar = {
    codigo?: boolean
    cor?: boolean
  }

  export type PoloOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"codigo" | "cor", ExtArgs["result"]["polo"]>
  export type PoloInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Gola?: boolean | Polo$GolaArgs<ExtArgs>
    Punho?: boolean | Polo$PunhoArgs<ExtArgs>
  }
  export type PoloIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PoloIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PoloPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Polo"
    objects: {
      Gola: Prisma.$GolaPayload<ExtArgs> | null
      Punho: Prisma.$PunhoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      codigo: string
      cor: string
    }, ExtArgs["result"]["polo"]>
    composites: {}
  }

  type PoloGetPayload<S extends boolean | null | undefined | PoloDefaultArgs> = $Result.GetResult<Prisma.$PoloPayload, S>

  type PoloCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PoloFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PoloCountAggregateInputType | true
    }

  export interface PoloDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Polo'], meta: { name: 'Polo' } }
    /**
     * Find zero or one Polo that matches the filter.
     * @param {PoloFindUniqueArgs} args - Arguments to find a Polo
     * @example
     * // Get one Polo
     * const polo = await prisma.polo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PoloFindUniqueArgs>(args: SelectSubset<T, PoloFindUniqueArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Polo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PoloFindUniqueOrThrowArgs} args - Arguments to find a Polo
     * @example
     * // Get one Polo
     * const polo = await prisma.polo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PoloFindUniqueOrThrowArgs>(args: SelectSubset<T, PoloFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Polo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloFindFirstArgs} args - Arguments to find a Polo
     * @example
     * // Get one Polo
     * const polo = await prisma.polo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PoloFindFirstArgs>(args?: SelectSubset<T, PoloFindFirstArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Polo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloFindFirstOrThrowArgs} args - Arguments to find a Polo
     * @example
     * // Get one Polo
     * const polo = await prisma.polo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PoloFindFirstOrThrowArgs>(args?: SelectSubset<T, PoloFindFirstOrThrowArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Polos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Polos
     * const polos = await prisma.polo.findMany()
     * 
     * // Get first 10 Polos
     * const polos = await prisma.polo.findMany({ take: 10 })
     * 
     * // Only select the `codigo`
     * const poloWithCodigoOnly = await prisma.polo.findMany({ select: { codigo: true } })
     * 
     */
    findMany<T extends PoloFindManyArgs>(args?: SelectSubset<T, PoloFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Polo.
     * @param {PoloCreateArgs} args - Arguments to create a Polo.
     * @example
     * // Create one Polo
     * const Polo = await prisma.polo.create({
     *   data: {
     *     // ... data to create a Polo
     *   }
     * })
     * 
     */
    create<T extends PoloCreateArgs>(args: SelectSubset<T, PoloCreateArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Polos.
     * @param {PoloCreateManyArgs} args - Arguments to create many Polos.
     * @example
     * // Create many Polos
     * const polo = await prisma.polo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PoloCreateManyArgs>(args?: SelectSubset<T, PoloCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Polos and returns the data saved in the database.
     * @param {PoloCreateManyAndReturnArgs} args - Arguments to create many Polos.
     * @example
     * // Create many Polos
     * const polo = await prisma.polo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Polos and only return the `codigo`
     * const poloWithCodigoOnly = await prisma.polo.createManyAndReturn({
     *   select: { codigo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PoloCreateManyAndReturnArgs>(args?: SelectSubset<T, PoloCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Polo.
     * @param {PoloDeleteArgs} args - Arguments to delete one Polo.
     * @example
     * // Delete one Polo
     * const Polo = await prisma.polo.delete({
     *   where: {
     *     // ... filter to delete one Polo
     *   }
     * })
     * 
     */
    delete<T extends PoloDeleteArgs>(args: SelectSubset<T, PoloDeleteArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Polo.
     * @param {PoloUpdateArgs} args - Arguments to update one Polo.
     * @example
     * // Update one Polo
     * const polo = await prisma.polo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PoloUpdateArgs>(args: SelectSubset<T, PoloUpdateArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Polos.
     * @param {PoloDeleteManyArgs} args - Arguments to filter Polos to delete.
     * @example
     * // Delete a few Polos
     * const { count } = await prisma.polo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PoloDeleteManyArgs>(args?: SelectSubset<T, PoloDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Polos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Polos
     * const polo = await prisma.polo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PoloUpdateManyArgs>(args: SelectSubset<T, PoloUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Polos and returns the data updated in the database.
     * @param {PoloUpdateManyAndReturnArgs} args - Arguments to update many Polos.
     * @example
     * // Update many Polos
     * const polo = await prisma.polo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Polos and only return the `codigo`
     * const poloWithCodigoOnly = await prisma.polo.updateManyAndReturn({
     *   select: { codigo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PoloUpdateManyAndReturnArgs>(args: SelectSubset<T, PoloUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Polo.
     * @param {PoloUpsertArgs} args - Arguments to update or create a Polo.
     * @example
     * // Update or create a Polo
     * const polo = await prisma.polo.upsert({
     *   create: {
     *     // ... data to create a Polo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Polo we want to update
     *   }
     * })
     */
    upsert<T extends PoloUpsertArgs>(args: SelectSubset<T, PoloUpsertArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Polos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloCountArgs} args - Arguments to filter Polos to count.
     * @example
     * // Count the number of Polos
     * const count = await prisma.polo.count({
     *   where: {
     *     // ... the filter for the Polos we want to count
     *   }
     * })
    **/
    count<T extends PoloCountArgs>(
      args?: Subset<T, PoloCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PoloCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Polo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PoloAggregateArgs>(args: Subset<T, PoloAggregateArgs>): Prisma.PrismaPromise<GetPoloAggregateType<T>>

    /**
     * Group by Polo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoloGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PoloGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PoloGroupByArgs['orderBy'] }
        : { orderBy?: PoloGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PoloGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPoloGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Polo model
   */
  readonly fields: PoloFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Polo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PoloClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Gola<T extends Polo$GolaArgs<ExtArgs> = {}>(args?: Subset<T, Polo$GolaArgs<ExtArgs>>): Prisma__GolaClient<$Result.GetResult<Prisma.$GolaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Punho<T extends Polo$PunhoArgs<ExtArgs> = {}>(args?: Subset<T, Polo$PunhoArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Polo model
   */ 
  interface PoloFieldRefs {
    readonly codigo: FieldRef<"Polo", 'String'>
    readonly cor: FieldRef<"Polo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Polo findUnique
   */
  export type PoloFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter, which Polo to fetch.
     */
    where: PoloWhereUniqueInput
  }

  /**
   * Polo findUniqueOrThrow
   */
  export type PoloFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter, which Polo to fetch.
     */
    where: PoloWhereUniqueInput
  }

  /**
   * Polo findFirst
   */
  export type PoloFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter, which Polo to fetch.
     */
    where?: PoloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polos to fetch.
     */
    orderBy?: PoloOrderByWithRelationInput | PoloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Polos.
     */
    cursor?: PoloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Polos.
     */
    distinct?: PoloScalarFieldEnum | PoloScalarFieldEnum[]
  }

  /**
   * Polo findFirstOrThrow
   */
  export type PoloFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter, which Polo to fetch.
     */
    where?: PoloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polos to fetch.
     */
    orderBy?: PoloOrderByWithRelationInput | PoloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Polos.
     */
    cursor?: PoloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Polos.
     */
    distinct?: PoloScalarFieldEnum | PoloScalarFieldEnum[]
  }

  /**
   * Polo findMany
   */
  export type PoloFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter, which Polos to fetch.
     */
    where?: PoloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polos to fetch.
     */
    orderBy?: PoloOrderByWithRelationInput | PoloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Polos.
     */
    cursor?: PoloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polos.
     */
    skip?: number
    distinct?: PoloScalarFieldEnum | PoloScalarFieldEnum[]
  }

  /**
   * Polo create
   */
  export type PoloCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * The data needed to create a Polo.
     */
    data: XOR<PoloCreateInput, PoloUncheckedCreateInput>
  }

  /**
   * Polo createMany
   */
  export type PoloCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Polos.
     */
    data: PoloCreateManyInput | PoloCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Polo createManyAndReturn
   */
  export type PoloCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * The data used to create many Polos.
     */
    data: PoloCreateManyInput | PoloCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Polo update
   */
  export type PoloUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * The data needed to update a Polo.
     */
    data: XOR<PoloUpdateInput, PoloUncheckedUpdateInput>
    /**
     * Choose, which Polo to update.
     */
    where: PoloWhereUniqueInput
  }

  /**
   * Polo updateMany
   */
  export type PoloUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Polos.
     */
    data: XOR<PoloUpdateManyMutationInput, PoloUncheckedUpdateManyInput>
    /**
     * Filter which Polos to update
     */
    where?: PoloWhereInput
    /**
     * Limit how many Polos to update.
     */
    limit?: number
  }

  /**
   * Polo updateManyAndReturn
   */
  export type PoloUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * The data used to update Polos.
     */
    data: XOR<PoloUpdateManyMutationInput, PoloUncheckedUpdateManyInput>
    /**
     * Filter which Polos to update
     */
    where?: PoloWhereInput
    /**
     * Limit how many Polos to update.
     */
    limit?: number
  }

  /**
   * Polo upsert
   */
  export type PoloUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * The filter to search for the Polo to update in case it exists.
     */
    where: PoloWhereUniqueInput
    /**
     * In case the Polo found by the `where` argument doesn't exist, create a new Polo with this data.
     */
    create: XOR<PoloCreateInput, PoloUncheckedCreateInput>
    /**
     * In case the Polo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PoloUpdateInput, PoloUncheckedUpdateInput>
  }

  /**
   * Polo delete
   */
  export type PoloDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
    /**
     * Filter which Polo to delete.
     */
    where: PoloWhereUniqueInput
  }

  /**
   * Polo deleteMany
   */
  export type PoloDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Polos to delete
     */
    where?: PoloWhereInput
    /**
     * Limit how many Polos to delete.
     */
    limit?: number
  }

  /**
   * Polo.Gola
   */
  export type Polo$GolaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gola
     */
    select?: GolaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gola
     */
    omit?: GolaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GolaInclude<ExtArgs> | null
    where?: GolaWhereInput
  }

  /**
   * Polo.Punho
   */
  export type Polo$PunhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    where?: PunhoWhereInput
  }

  /**
   * Polo without action
   */
  export type PoloDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Polo
     */
    select?: PoloSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Polo
     */
    omit?: PoloOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoloInclude<ExtArgs> | null
  }


  /**
   * Model Punho
   */

  export type AggregatePunho = {
    _count: PunhoCountAggregateOutputType | null
    _avg: PunhoAvgAggregateOutputType | null
    _sum: PunhoSumAggregateOutputType | null
    _min: PunhoMinAggregateOutputType | null
    _max: PunhoMaxAggregateOutputType | null
  }

  export type PunhoAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type PunhoSumAggregateOutputType = {
    quantidade: number | null
  }

  export type PunhoMinAggregateOutputType = {
    poloCodigo: string | null
    quantidade: number | null
  }

  export type PunhoMaxAggregateOutputType = {
    poloCodigo: string | null
    quantidade: number | null
  }

  export type PunhoCountAggregateOutputType = {
    poloCodigo: number
    quantidade: number
    _all: number
  }


  export type PunhoAvgAggregateInputType = {
    quantidade?: true
  }

  export type PunhoSumAggregateInputType = {
    quantidade?: true
  }

  export type PunhoMinAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
  }

  export type PunhoMaxAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
  }

  export type PunhoCountAggregateInputType = {
    poloCodigo?: true
    quantidade?: true
    _all?: true
  }

  export type PunhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Punho to aggregate.
     */
    where?: PunhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punhos to fetch.
     */
    orderBy?: PunhoOrderByWithRelationInput | PunhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PunhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Punhos
    **/
    _count?: true | PunhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PunhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PunhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PunhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PunhoMaxAggregateInputType
  }

  export type GetPunhoAggregateType<T extends PunhoAggregateArgs> = {
        [P in keyof T & keyof AggregatePunho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePunho[P]>
      : GetScalarType<T[P], AggregatePunho[P]>
  }




  export type PunhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PunhoWhereInput
    orderBy?: PunhoOrderByWithAggregationInput | PunhoOrderByWithAggregationInput[]
    by: PunhoScalarFieldEnum[] | PunhoScalarFieldEnum
    having?: PunhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PunhoCountAggregateInputType | true
    _avg?: PunhoAvgAggregateInputType
    _sum?: PunhoSumAggregateInputType
    _min?: PunhoMinAggregateInputType
    _max?: PunhoMaxAggregateInputType
  }

  export type PunhoGroupByOutputType = {
    poloCodigo: string
    quantidade: number
    _count: PunhoCountAggregateOutputType | null
    _avg: PunhoAvgAggregateOutputType | null
    _sum: PunhoSumAggregateOutputType | null
    _min: PunhoMinAggregateOutputType | null
    _max: PunhoMaxAggregateOutputType | null
  }

  type GetPunhoGroupByPayload<T extends PunhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PunhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PunhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PunhoGroupByOutputType[P]>
            : GetScalarType<T[P], PunhoGroupByOutputType[P]>
        }
      >
    >


  export type PunhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punho"]>

  export type PunhoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punho"]>

  export type PunhoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    poloCodigo?: boolean
    quantidade?: boolean
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punho"]>

  export type PunhoSelectScalar = {
    poloCodigo?: boolean
    quantidade?: boolean
  }

  export type PunhoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"poloCodigo" | "quantidade", ExtArgs["result"]["punho"]>
  export type PunhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }
  export type PunhoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }
  export type PunhoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Polo?: boolean | PoloDefaultArgs<ExtArgs>
  }

  export type $PunhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Punho"
    objects: {
      Polo: Prisma.$PoloPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      poloCodigo: string
      quantidade: number
    }, ExtArgs["result"]["punho"]>
    composites: {}
  }

  type PunhoGetPayload<S extends boolean | null | undefined | PunhoDefaultArgs> = $Result.GetResult<Prisma.$PunhoPayload, S>

  type PunhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PunhoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PunhoCountAggregateInputType | true
    }

  export interface PunhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Punho'], meta: { name: 'Punho' } }
    /**
     * Find zero or one Punho that matches the filter.
     * @param {PunhoFindUniqueArgs} args - Arguments to find a Punho
     * @example
     * // Get one Punho
     * const punho = await prisma.punho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PunhoFindUniqueArgs>(args: SelectSubset<T, PunhoFindUniqueArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Punho that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PunhoFindUniqueOrThrowArgs} args - Arguments to find a Punho
     * @example
     * // Get one Punho
     * const punho = await prisma.punho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PunhoFindUniqueOrThrowArgs>(args: SelectSubset<T, PunhoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Punho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoFindFirstArgs} args - Arguments to find a Punho
     * @example
     * // Get one Punho
     * const punho = await prisma.punho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PunhoFindFirstArgs>(args?: SelectSubset<T, PunhoFindFirstArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Punho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoFindFirstOrThrowArgs} args - Arguments to find a Punho
     * @example
     * // Get one Punho
     * const punho = await prisma.punho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PunhoFindFirstOrThrowArgs>(args?: SelectSubset<T, PunhoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Punhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Punhos
     * const punhos = await prisma.punho.findMany()
     * 
     * // Get first 10 Punhos
     * const punhos = await prisma.punho.findMany({ take: 10 })
     * 
     * // Only select the `poloCodigo`
     * const punhoWithPoloCodigoOnly = await prisma.punho.findMany({ select: { poloCodigo: true } })
     * 
     */
    findMany<T extends PunhoFindManyArgs>(args?: SelectSubset<T, PunhoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Punho.
     * @param {PunhoCreateArgs} args - Arguments to create a Punho.
     * @example
     * // Create one Punho
     * const Punho = await prisma.punho.create({
     *   data: {
     *     // ... data to create a Punho
     *   }
     * })
     * 
     */
    create<T extends PunhoCreateArgs>(args: SelectSubset<T, PunhoCreateArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Punhos.
     * @param {PunhoCreateManyArgs} args - Arguments to create many Punhos.
     * @example
     * // Create many Punhos
     * const punho = await prisma.punho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PunhoCreateManyArgs>(args?: SelectSubset<T, PunhoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Punhos and returns the data saved in the database.
     * @param {PunhoCreateManyAndReturnArgs} args - Arguments to create many Punhos.
     * @example
     * // Create many Punhos
     * const punho = await prisma.punho.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Punhos and only return the `poloCodigo`
     * const punhoWithPoloCodigoOnly = await prisma.punho.createManyAndReturn({
     *   select: { poloCodigo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PunhoCreateManyAndReturnArgs>(args?: SelectSubset<T, PunhoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Punho.
     * @param {PunhoDeleteArgs} args - Arguments to delete one Punho.
     * @example
     * // Delete one Punho
     * const Punho = await prisma.punho.delete({
     *   where: {
     *     // ... filter to delete one Punho
     *   }
     * })
     * 
     */
    delete<T extends PunhoDeleteArgs>(args: SelectSubset<T, PunhoDeleteArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Punho.
     * @param {PunhoUpdateArgs} args - Arguments to update one Punho.
     * @example
     * // Update one Punho
     * const punho = await prisma.punho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PunhoUpdateArgs>(args: SelectSubset<T, PunhoUpdateArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Punhos.
     * @param {PunhoDeleteManyArgs} args - Arguments to filter Punhos to delete.
     * @example
     * // Delete a few Punhos
     * const { count } = await prisma.punho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PunhoDeleteManyArgs>(args?: SelectSubset<T, PunhoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Punhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Punhos
     * const punho = await prisma.punho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PunhoUpdateManyArgs>(args: SelectSubset<T, PunhoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Punhos and returns the data updated in the database.
     * @param {PunhoUpdateManyAndReturnArgs} args - Arguments to update many Punhos.
     * @example
     * // Update many Punhos
     * const punho = await prisma.punho.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Punhos and only return the `poloCodigo`
     * const punhoWithPoloCodigoOnly = await prisma.punho.updateManyAndReturn({
     *   select: { poloCodigo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PunhoUpdateManyAndReturnArgs>(args: SelectSubset<T, PunhoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Punho.
     * @param {PunhoUpsertArgs} args - Arguments to update or create a Punho.
     * @example
     * // Update or create a Punho
     * const punho = await prisma.punho.upsert({
     *   create: {
     *     // ... data to create a Punho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Punho we want to update
     *   }
     * })
     */
    upsert<T extends PunhoUpsertArgs>(args: SelectSubset<T, PunhoUpsertArgs<ExtArgs>>): Prisma__PunhoClient<$Result.GetResult<Prisma.$PunhoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Punhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoCountArgs} args - Arguments to filter Punhos to count.
     * @example
     * // Count the number of Punhos
     * const count = await prisma.punho.count({
     *   where: {
     *     // ... the filter for the Punhos we want to count
     *   }
     * })
    **/
    count<T extends PunhoCountArgs>(
      args?: Subset<T, PunhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PunhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Punho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PunhoAggregateArgs>(args: Subset<T, PunhoAggregateArgs>): Prisma.PrismaPromise<GetPunhoAggregateType<T>>

    /**
     * Group by Punho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PunhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PunhoGroupByArgs['orderBy'] }
        : { orderBy?: PunhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PunhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPunhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Punho model
   */
  readonly fields: PunhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Punho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PunhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Polo<T extends PoloDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PoloDefaultArgs<ExtArgs>>): Prisma__PoloClient<$Result.GetResult<Prisma.$PoloPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Punho model
   */ 
  interface PunhoFieldRefs {
    readonly poloCodigo: FieldRef<"Punho", 'String'>
    readonly quantidade: FieldRef<"Punho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Punho findUnique
   */
  export type PunhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter, which Punho to fetch.
     */
    where: PunhoWhereUniqueInput
  }

  /**
   * Punho findUniqueOrThrow
   */
  export type PunhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter, which Punho to fetch.
     */
    where: PunhoWhereUniqueInput
  }

  /**
   * Punho findFirst
   */
  export type PunhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter, which Punho to fetch.
     */
    where?: PunhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punhos to fetch.
     */
    orderBy?: PunhoOrderByWithRelationInput | PunhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Punhos.
     */
    cursor?: PunhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Punhos.
     */
    distinct?: PunhoScalarFieldEnum | PunhoScalarFieldEnum[]
  }

  /**
   * Punho findFirstOrThrow
   */
  export type PunhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter, which Punho to fetch.
     */
    where?: PunhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punhos to fetch.
     */
    orderBy?: PunhoOrderByWithRelationInput | PunhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Punhos.
     */
    cursor?: PunhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Punhos.
     */
    distinct?: PunhoScalarFieldEnum | PunhoScalarFieldEnum[]
  }

  /**
   * Punho findMany
   */
  export type PunhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter, which Punhos to fetch.
     */
    where?: PunhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punhos to fetch.
     */
    orderBy?: PunhoOrderByWithRelationInput | PunhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Punhos.
     */
    cursor?: PunhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punhos.
     */
    skip?: number
    distinct?: PunhoScalarFieldEnum | PunhoScalarFieldEnum[]
  }

  /**
   * Punho create
   */
  export type PunhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * The data needed to create a Punho.
     */
    data: XOR<PunhoCreateInput, PunhoUncheckedCreateInput>
  }

  /**
   * Punho createMany
   */
  export type PunhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Punhos.
     */
    data: PunhoCreateManyInput | PunhoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Punho createManyAndReturn
   */
  export type PunhoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * The data used to create many Punhos.
     */
    data: PunhoCreateManyInput | PunhoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Punho update
   */
  export type PunhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * The data needed to update a Punho.
     */
    data: XOR<PunhoUpdateInput, PunhoUncheckedUpdateInput>
    /**
     * Choose, which Punho to update.
     */
    where: PunhoWhereUniqueInput
  }

  /**
   * Punho updateMany
   */
  export type PunhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Punhos.
     */
    data: XOR<PunhoUpdateManyMutationInput, PunhoUncheckedUpdateManyInput>
    /**
     * Filter which Punhos to update
     */
    where?: PunhoWhereInput
    /**
     * Limit how many Punhos to update.
     */
    limit?: number
  }

  /**
   * Punho updateManyAndReturn
   */
  export type PunhoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * The data used to update Punhos.
     */
    data: XOR<PunhoUpdateManyMutationInput, PunhoUncheckedUpdateManyInput>
    /**
     * Filter which Punhos to update
     */
    where?: PunhoWhereInput
    /**
     * Limit how many Punhos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Punho upsert
   */
  export type PunhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * The filter to search for the Punho to update in case it exists.
     */
    where: PunhoWhereUniqueInput
    /**
     * In case the Punho found by the `where` argument doesn't exist, create a new Punho with this data.
     */
    create: XOR<PunhoCreateInput, PunhoUncheckedCreateInput>
    /**
     * In case the Punho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PunhoUpdateInput, PunhoUncheckedUpdateInput>
  }

  /**
   * Punho delete
   */
  export type PunhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
    /**
     * Filter which Punho to delete.
     */
    where: PunhoWhereUniqueInput
  }

  /**
   * Punho deleteMany
   */
  export type PunhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Punhos to delete
     */
    where?: PunhoWhereInput
    /**
     * Limit how many Punhos to delete.
     */
    limit?: number
  }

  /**
   * Punho without action
   */
  export type PunhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punho
     */
    select?: PunhoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punho
     */
    omit?: PunhoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunhoInclude<ExtArgs> | null
  }


  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
    Eadmin: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
    Eadmin: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
    Eadmin: number | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
    Eadmin: number | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    senha: number
    Eadmin: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
    Eadmin?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
    Eadmin?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
    Eadmin?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
    Eadmin?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
    Eadmin?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string
    senha: string
    Eadmin: number
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    senha?: boolean
    Eadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    senha?: boolean
    Eadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    senha?: boolean
    Eadmin?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    senha?: boolean
    Eadmin?: boolean
  }

  export type usuariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "senha" | "Eadmin", ExtArgs["result"]["usuarios"]>

  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      senha: string
      Eadmin: number
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, usuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {usuariosUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usuariosUpdateManyAndReturnArgs>(args: SelectSubset<T, usuariosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly nome: FieldRef<"usuarios", 'String'>
    readonly senha: FieldRef<"usuarios", 'String'>
    readonly Eadmin: FieldRef<"usuarios", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios createManyAndReturn
   */
  export type usuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios updateManyAndReturn
   */
  export type usuariosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to delete.
     */
    limit?: number
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GolaScalarFieldEnum: {
    poloCodigo: 'poloCodigo',
    quantidade: 'quantidade'
  };

  export type GolaScalarFieldEnum = (typeof GolaScalarFieldEnum)[keyof typeof GolaScalarFieldEnum]


  export const PoloScalarFieldEnum: {
    codigo: 'codigo',
    cor: 'cor'
  };

  export type PoloScalarFieldEnum = (typeof PoloScalarFieldEnum)[keyof typeof PoloScalarFieldEnum]


  export const PunhoScalarFieldEnum: {
    poloCodigo: 'poloCodigo',
    quantidade: 'quantidade'
  };

  export type PunhoScalarFieldEnum = (typeof PunhoScalarFieldEnum)[keyof typeof PunhoScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    senha: 'senha',
    Eadmin: 'Eadmin'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type GolaWhereInput = {
    AND?: GolaWhereInput | GolaWhereInput[]
    OR?: GolaWhereInput[]
    NOT?: GolaWhereInput | GolaWhereInput[]
    poloCodigo?: StringFilter<"Gola"> | string
    quantidade?: IntFilter<"Gola"> | number
    Polo?: XOR<PoloScalarRelationFilter, PoloWhereInput>
  }

  export type GolaOrderByWithRelationInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
    Polo?: PoloOrderByWithRelationInput
  }

  export type GolaWhereUniqueInput = Prisma.AtLeast<{
    poloCodigo?: string
    AND?: GolaWhereInput | GolaWhereInput[]
    OR?: GolaWhereInput[]
    NOT?: GolaWhereInput | GolaWhereInput[]
    quantidade?: IntFilter<"Gola"> | number
    Polo?: XOR<PoloScalarRelationFilter, PoloWhereInput>
  }, "poloCodigo">

  export type GolaOrderByWithAggregationInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
    _count?: GolaCountOrderByAggregateInput
    _avg?: GolaAvgOrderByAggregateInput
    _max?: GolaMaxOrderByAggregateInput
    _min?: GolaMinOrderByAggregateInput
    _sum?: GolaSumOrderByAggregateInput
  }

  export type GolaScalarWhereWithAggregatesInput = {
    AND?: GolaScalarWhereWithAggregatesInput | GolaScalarWhereWithAggregatesInput[]
    OR?: GolaScalarWhereWithAggregatesInput[]
    NOT?: GolaScalarWhereWithAggregatesInput | GolaScalarWhereWithAggregatesInput[]
    poloCodigo?: StringWithAggregatesFilter<"Gola"> | string
    quantidade?: IntWithAggregatesFilter<"Gola"> | number
  }

  export type PoloWhereInput = {
    AND?: PoloWhereInput | PoloWhereInput[]
    OR?: PoloWhereInput[]
    NOT?: PoloWhereInput | PoloWhereInput[]
    codigo?: StringFilter<"Polo"> | string
    cor?: StringFilter<"Polo"> | string
    Gola?: XOR<GolaNullableScalarRelationFilter, GolaWhereInput> | null
    Punho?: XOR<PunhoNullableScalarRelationFilter, PunhoWhereInput> | null
  }

  export type PoloOrderByWithRelationInput = {
    codigo?: SortOrder
    cor?: SortOrder
    Gola?: GolaOrderByWithRelationInput
    Punho?: PunhoOrderByWithRelationInput
  }

  export type PoloWhereUniqueInput = Prisma.AtLeast<{
    codigo?: string
    AND?: PoloWhereInput | PoloWhereInput[]
    OR?: PoloWhereInput[]
    NOT?: PoloWhereInput | PoloWhereInput[]
    cor?: StringFilter<"Polo"> | string
    Gola?: XOR<GolaNullableScalarRelationFilter, GolaWhereInput> | null
    Punho?: XOR<PunhoNullableScalarRelationFilter, PunhoWhereInput> | null
  }, "codigo">

  export type PoloOrderByWithAggregationInput = {
    codigo?: SortOrder
    cor?: SortOrder
    _count?: PoloCountOrderByAggregateInput
    _max?: PoloMaxOrderByAggregateInput
    _min?: PoloMinOrderByAggregateInput
  }

  export type PoloScalarWhereWithAggregatesInput = {
    AND?: PoloScalarWhereWithAggregatesInput | PoloScalarWhereWithAggregatesInput[]
    OR?: PoloScalarWhereWithAggregatesInput[]
    NOT?: PoloScalarWhereWithAggregatesInput | PoloScalarWhereWithAggregatesInput[]
    codigo?: StringWithAggregatesFilter<"Polo"> | string
    cor?: StringWithAggregatesFilter<"Polo"> | string
  }

  export type PunhoWhereInput = {
    AND?: PunhoWhereInput | PunhoWhereInput[]
    OR?: PunhoWhereInput[]
    NOT?: PunhoWhereInput | PunhoWhereInput[]
    poloCodigo?: StringFilter<"Punho"> | string
    quantidade?: IntFilter<"Punho"> | number
    Polo?: XOR<PoloScalarRelationFilter, PoloWhereInput>
  }

  export type PunhoOrderByWithRelationInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
    Polo?: PoloOrderByWithRelationInput
  }

  export type PunhoWhereUniqueInput = Prisma.AtLeast<{
    poloCodigo?: string
    AND?: PunhoWhereInput | PunhoWhereInput[]
    OR?: PunhoWhereInput[]
    NOT?: PunhoWhereInput | PunhoWhereInput[]
    quantidade?: IntFilter<"Punho"> | number
    Polo?: XOR<PoloScalarRelationFilter, PoloWhereInput>
  }, "poloCodigo">

  export type PunhoOrderByWithAggregationInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
    _count?: PunhoCountOrderByAggregateInput
    _avg?: PunhoAvgOrderByAggregateInput
    _max?: PunhoMaxOrderByAggregateInput
    _min?: PunhoMinOrderByAggregateInput
    _sum?: PunhoSumOrderByAggregateInput
  }

  export type PunhoScalarWhereWithAggregatesInput = {
    AND?: PunhoScalarWhereWithAggregatesInput | PunhoScalarWhereWithAggregatesInput[]
    OR?: PunhoScalarWhereWithAggregatesInput[]
    NOT?: PunhoScalarWhereWithAggregatesInput | PunhoScalarWhereWithAggregatesInput[]
    poloCodigo?: StringWithAggregatesFilter<"Punho"> | string
    quantidade?: IntWithAggregatesFilter<"Punho"> | number
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    nome?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    Eadmin?: IntFilter<"usuarios"> | number
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Eadmin?: SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    senha?: StringFilter<"usuarios"> | string
    Eadmin?: IntFilter<"usuarios"> | number
  }, "id" | "nome">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Eadmin?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    nome?: StringWithAggregatesFilter<"usuarios"> | string
    senha?: StringWithAggregatesFilter<"usuarios"> | string
    Eadmin?: IntWithAggregatesFilter<"usuarios"> | number
  }

  export type GolaCreateInput = {
    quantidade: number
    Polo: PoloCreateNestedOneWithoutGolaInput
  }

  export type GolaUncheckedCreateInput = {
    poloCodigo: string
    quantidade: number
  }

  export type GolaUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    Polo?: PoloUpdateOneRequiredWithoutGolaNestedInput
  }

  export type GolaUncheckedUpdateInput = {
    poloCodigo?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type GolaCreateManyInput = {
    poloCodigo: string
    quantidade: number
  }

  export type GolaUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type GolaUncheckedUpdateManyInput = {
    poloCodigo?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PoloCreateInput = {
    codigo: string
    cor: string
    Gola?: GolaCreateNestedOneWithoutPoloInput
    Punho?: PunhoCreateNestedOneWithoutPoloInput
  }

  export type PoloUncheckedCreateInput = {
    codigo: string
    cor: string
    Gola?: GolaUncheckedCreateNestedOneWithoutPoloInput
    Punho?: PunhoUncheckedCreateNestedOneWithoutPoloInput
  }

  export type PoloUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Gola?: GolaUpdateOneWithoutPoloNestedInput
    Punho?: PunhoUpdateOneWithoutPoloNestedInput
  }

  export type PoloUncheckedUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Gola?: GolaUncheckedUpdateOneWithoutPoloNestedInput
    Punho?: PunhoUncheckedUpdateOneWithoutPoloNestedInput
  }

  export type PoloCreateManyInput = {
    codigo: string
    cor: string
  }

  export type PoloUpdateManyMutationInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
  }

  export type PoloUncheckedUpdateManyInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
  }

  export type PunhoCreateInput = {
    quantidade: number
    Polo: PoloCreateNestedOneWithoutPunhoInput
  }

  export type PunhoUncheckedCreateInput = {
    poloCodigo: string
    quantidade: number
  }

  export type PunhoUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    Polo?: PoloUpdateOneRequiredWithoutPunhoNestedInput
  }

  export type PunhoUncheckedUpdateInput = {
    poloCodigo?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PunhoCreateManyInput = {
    poloCodigo: string
    quantidade: number
  }

  export type PunhoUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PunhoUncheckedUpdateManyInput = {
    poloCodigo?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosCreateInput = {
    nome: string
    senha?: string
    Eadmin: number
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nome: string
    senha?: string
    Eadmin: number
  }

  export type usuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Eadmin?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Eadmin?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosCreateManyInput = {
    id?: number
    nome: string
    senha?: string
    Eadmin: number
  }

  export type usuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Eadmin?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Eadmin?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PoloScalarRelationFilter = {
    is?: PoloWhereInput
    isNot?: PoloWhereInput
  }

  export type GolaCountOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type GolaAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type GolaMaxOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type GolaMinOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type GolaSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type GolaNullableScalarRelationFilter = {
    is?: GolaWhereInput | null
    isNot?: GolaWhereInput | null
  }

  export type PunhoNullableScalarRelationFilter = {
    is?: PunhoWhereInput | null
    isNot?: PunhoWhereInput | null
  }

  export type PoloCountOrderByAggregateInput = {
    codigo?: SortOrder
    cor?: SortOrder
  }

  export type PoloMaxOrderByAggregateInput = {
    codigo?: SortOrder
    cor?: SortOrder
  }

  export type PoloMinOrderByAggregateInput = {
    codigo?: SortOrder
    cor?: SortOrder
  }

  export type PunhoCountOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type PunhoAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type PunhoMaxOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type PunhoMinOrderByAggregateInput = {
    poloCodigo?: SortOrder
    quantidade?: SortOrder
  }

  export type PunhoSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Eadmin?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
    Eadmin?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Eadmin?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Eadmin?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
    Eadmin?: SortOrder
  }

  export type PoloCreateNestedOneWithoutGolaInput = {
    create?: XOR<PoloCreateWithoutGolaInput, PoloUncheckedCreateWithoutGolaInput>
    connectOrCreate?: PoloCreateOrConnectWithoutGolaInput
    connect?: PoloWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PoloUpdateOneRequiredWithoutGolaNestedInput = {
    create?: XOR<PoloCreateWithoutGolaInput, PoloUncheckedCreateWithoutGolaInput>
    connectOrCreate?: PoloCreateOrConnectWithoutGolaInput
    upsert?: PoloUpsertWithoutGolaInput
    connect?: PoloWhereUniqueInput
    update?: XOR<XOR<PoloUpdateToOneWithWhereWithoutGolaInput, PoloUpdateWithoutGolaInput>, PoloUncheckedUpdateWithoutGolaInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GolaCreateNestedOneWithoutPoloInput = {
    create?: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
    connectOrCreate?: GolaCreateOrConnectWithoutPoloInput
    connect?: GolaWhereUniqueInput
  }

  export type PunhoCreateNestedOneWithoutPoloInput = {
    create?: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
    connectOrCreate?: PunhoCreateOrConnectWithoutPoloInput
    connect?: PunhoWhereUniqueInput
  }

  export type GolaUncheckedCreateNestedOneWithoutPoloInput = {
    create?: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
    connectOrCreate?: GolaCreateOrConnectWithoutPoloInput
    connect?: GolaWhereUniqueInput
  }

  export type PunhoUncheckedCreateNestedOneWithoutPoloInput = {
    create?: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
    connectOrCreate?: PunhoCreateOrConnectWithoutPoloInput
    connect?: PunhoWhereUniqueInput
  }

  export type GolaUpdateOneWithoutPoloNestedInput = {
    create?: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
    connectOrCreate?: GolaCreateOrConnectWithoutPoloInput
    upsert?: GolaUpsertWithoutPoloInput
    disconnect?: GolaWhereInput | boolean
    delete?: GolaWhereInput | boolean
    connect?: GolaWhereUniqueInput
    update?: XOR<XOR<GolaUpdateToOneWithWhereWithoutPoloInput, GolaUpdateWithoutPoloInput>, GolaUncheckedUpdateWithoutPoloInput>
  }

  export type PunhoUpdateOneWithoutPoloNestedInput = {
    create?: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
    connectOrCreate?: PunhoCreateOrConnectWithoutPoloInput
    upsert?: PunhoUpsertWithoutPoloInput
    disconnect?: PunhoWhereInput | boolean
    delete?: PunhoWhereInput | boolean
    connect?: PunhoWhereUniqueInput
    update?: XOR<XOR<PunhoUpdateToOneWithWhereWithoutPoloInput, PunhoUpdateWithoutPoloInput>, PunhoUncheckedUpdateWithoutPoloInput>
  }

  export type GolaUncheckedUpdateOneWithoutPoloNestedInput = {
    create?: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
    connectOrCreate?: GolaCreateOrConnectWithoutPoloInput
    upsert?: GolaUpsertWithoutPoloInput
    disconnect?: GolaWhereInput | boolean
    delete?: GolaWhereInput | boolean
    connect?: GolaWhereUniqueInput
    update?: XOR<XOR<GolaUpdateToOneWithWhereWithoutPoloInput, GolaUpdateWithoutPoloInput>, GolaUncheckedUpdateWithoutPoloInput>
  }

  export type PunhoUncheckedUpdateOneWithoutPoloNestedInput = {
    create?: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
    connectOrCreate?: PunhoCreateOrConnectWithoutPoloInput
    upsert?: PunhoUpsertWithoutPoloInput
    disconnect?: PunhoWhereInput | boolean
    delete?: PunhoWhereInput | boolean
    connect?: PunhoWhereUniqueInput
    update?: XOR<XOR<PunhoUpdateToOneWithWhereWithoutPoloInput, PunhoUpdateWithoutPoloInput>, PunhoUncheckedUpdateWithoutPoloInput>
  }

  export type PoloCreateNestedOneWithoutPunhoInput = {
    create?: XOR<PoloCreateWithoutPunhoInput, PoloUncheckedCreateWithoutPunhoInput>
    connectOrCreate?: PoloCreateOrConnectWithoutPunhoInput
    connect?: PoloWhereUniqueInput
  }

  export type PoloUpdateOneRequiredWithoutPunhoNestedInput = {
    create?: XOR<PoloCreateWithoutPunhoInput, PoloUncheckedCreateWithoutPunhoInput>
    connectOrCreate?: PoloCreateOrConnectWithoutPunhoInput
    upsert?: PoloUpsertWithoutPunhoInput
    connect?: PoloWhereUniqueInput
    update?: XOR<XOR<PoloUpdateToOneWithWhereWithoutPunhoInput, PoloUpdateWithoutPunhoInput>, PoloUncheckedUpdateWithoutPunhoInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PoloCreateWithoutGolaInput = {
    codigo: string
    cor: string
    Punho?: PunhoCreateNestedOneWithoutPoloInput
  }

  export type PoloUncheckedCreateWithoutGolaInput = {
    codigo: string
    cor: string
    Punho?: PunhoUncheckedCreateNestedOneWithoutPoloInput
  }

  export type PoloCreateOrConnectWithoutGolaInput = {
    where: PoloWhereUniqueInput
    create: XOR<PoloCreateWithoutGolaInput, PoloUncheckedCreateWithoutGolaInput>
  }

  export type PoloUpsertWithoutGolaInput = {
    update: XOR<PoloUpdateWithoutGolaInput, PoloUncheckedUpdateWithoutGolaInput>
    create: XOR<PoloCreateWithoutGolaInput, PoloUncheckedCreateWithoutGolaInput>
    where?: PoloWhereInput
  }

  export type PoloUpdateToOneWithWhereWithoutGolaInput = {
    where?: PoloWhereInput
    data: XOR<PoloUpdateWithoutGolaInput, PoloUncheckedUpdateWithoutGolaInput>
  }

  export type PoloUpdateWithoutGolaInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Punho?: PunhoUpdateOneWithoutPoloNestedInput
  }

  export type PoloUncheckedUpdateWithoutGolaInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Punho?: PunhoUncheckedUpdateOneWithoutPoloNestedInput
  }

  export type GolaCreateWithoutPoloInput = {
    quantidade: number
  }

  export type GolaUncheckedCreateWithoutPoloInput = {
    quantidade: number
  }

  export type GolaCreateOrConnectWithoutPoloInput = {
    where: GolaWhereUniqueInput
    create: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
  }

  export type PunhoCreateWithoutPoloInput = {
    quantidade: number
  }

  export type PunhoUncheckedCreateWithoutPoloInput = {
    quantidade: number
  }

  export type PunhoCreateOrConnectWithoutPoloInput = {
    where: PunhoWhereUniqueInput
    create: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
  }

  export type GolaUpsertWithoutPoloInput = {
    update: XOR<GolaUpdateWithoutPoloInput, GolaUncheckedUpdateWithoutPoloInput>
    create: XOR<GolaCreateWithoutPoloInput, GolaUncheckedCreateWithoutPoloInput>
    where?: GolaWhereInput
  }

  export type GolaUpdateToOneWithWhereWithoutPoloInput = {
    where?: GolaWhereInput
    data: XOR<GolaUpdateWithoutPoloInput, GolaUncheckedUpdateWithoutPoloInput>
  }

  export type GolaUpdateWithoutPoloInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type GolaUncheckedUpdateWithoutPoloInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PunhoUpsertWithoutPoloInput = {
    update: XOR<PunhoUpdateWithoutPoloInput, PunhoUncheckedUpdateWithoutPoloInput>
    create: XOR<PunhoCreateWithoutPoloInput, PunhoUncheckedCreateWithoutPoloInput>
    where?: PunhoWhereInput
  }

  export type PunhoUpdateToOneWithWhereWithoutPoloInput = {
    where?: PunhoWhereInput
    data: XOR<PunhoUpdateWithoutPoloInput, PunhoUncheckedUpdateWithoutPoloInput>
  }

  export type PunhoUpdateWithoutPoloInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PunhoUncheckedUpdateWithoutPoloInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type PoloCreateWithoutPunhoInput = {
    codigo: string
    cor: string
    Gola?: GolaCreateNestedOneWithoutPoloInput
  }

  export type PoloUncheckedCreateWithoutPunhoInput = {
    codigo: string
    cor: string
    Gola?: GolaUncheckedCreateNestedOneWithoutPoloInput
  }

  export type PoloCreateOrConnectWithoutPunhoInput = {
    where: PoloWhereUniqueInput
    create: XOR<PoloCreateWithoutPunhoInput, PoloUncheckedCreateWithoutPunhoInput>
  }

  export type PoloUpsertWithoutPunhoInput = {
    update: XOR<PoloUpdateWithoutPunhoInput, PoloUncheckedUpdateWithoutPunhoInput>
    create: XOR<PoloCreateWithoutPunhoInput, PoloUncheckedCreateWithoutPunhoInput>
    where?: PoloWhereInput
  }

  export type PoloUpdateToOneWithWhereWithoutPunhoInput = {
    where?: PoloWhereInput
    data: XOR<PoloUpdateWithoutPunhoInput, PoloUncheckedUpdateWithoutPunhoInput>
  }

  export type PoloUpdateWithoutPunhoInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Gola?: GolaUpdateOneWithoutPoloNestedInput
  }

  export type PoloUncheckedUpdateWithoutPunhoInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    Gola?: GolaUncheckedUpdateOneWithoutPoloNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}